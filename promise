Promise:
#To handle events(it may happen or may not happen)
A promise is a special javascript object that represents the eventual completion(or failure)
of an asynchronous operation
It allows us to handle the events.

These are three states:
1. pending:The inital state, the promise is still waiting for the operation 
to finish
2. fulfilled:The operation is completed successfully.
3.Rejected:The operation is failed.

Ex:
To create a promise new Promise();
THe promise constructor takes a function with 2 parameters;
resolve --- to mark as the promise as successful
reject-- to mark as failed.

Handling Promise:
.then() method is called when the promise is fulfilled
It receives the result from the resolve();

.catch() method is called when the promise is Rejected.
It will receive the result from the reject();

chaining promises:
-- you can have chain multiple .then()

  VScode:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
        // let myPromise=new Promise((resolve,reject)=>{
        //     let success=true 
        //     if (success){
        //         resolve("The operation was successful")
        //     } else{
        //         reject("The operatio was failed")
        //     }
        // });
        // myPromise
        // .then(result=>{
        //     console.log(result)
        // })
        // .catch(error=>{
        //     console.log(error)
        // })

        // let promise = new Promise((resolve, reject) => {
        //     resolve(5);
        // })

        // promise.then(result => {
        //     console.log(result)
        //     return result * 2
        // })
        //     .then(result => {
        //         console.log(result)
        //         return result + 3;
        //     })
        //     .then(result => {
        //         console.log(result)
        //     })
        //     .catch(error => {
        //         console.log(error,"Error")
        //     })
        // function delay(ms){
        //     let mypromise=new Promise((resolve,reject)=>{
        //         setTimeout(() => {
        //                 resolve(`Resolved after ${ms} milliseconds`);
        //             }, ms);
        //     })
        // }

        //     delay(2000)
        //         .then((result) => {
        //             console.log(result);
        //         })
        //         .catch((error) => {
        //             console.error(error);
        //         });

        // function delay(ms) {
        //     return new Promise((resolve, reject) => {
        //         setTimeout(() => {
        //             resolve(`Resolved after ${ms} milliseconds`);
        //         }, ms);
        //     });
        // }

        // let delayedPromise = new Promise((resolve, reject) => {
        //     setTimeout(() => {
        //         resolve("Promise resolved after 2 seconds");
        //     }, 2000);
        // });

        // delayedPromise
        //     .then(result => {
        //         console.log(result);
        //     })
        //     .catch(error => {
        //         console.log("Error:", error);
        //     });

        // let myPromise=new Promise((resolve,reject)=>{setTimeout(()=>{
        //     let success=true 
        //     if (success){
        //         resolve("The operation was successful")
        //     } else{
        //         reject("The operation was failed")
        //     }
        //   },5000);
        // });
        // console.log("Executing myPromise...");
        // myPromise
        // .then(result=>{
        //     console.log(result)
        // })
        // .catch(error=>{
        //     console.log(error)
        // });

    let fetchData = new Promise((resolve, reject) => {
        let fetchData = false
        setTimeOut(() => {
            if (fetchData) {
                resolve("Data Fetched successfully")
            } else {
                reject("Data Fetching is Failed")
            }
        }, 2000)
    })

    fetchData
        .then(result => {
            console.log(result)
        })
        .catch(error => {
            console.log(error)
        })
    </script>

</body>

</html>
